openapi: 3.0.0
info:
  title: Hackathon Backend API
  description: |
    Comprehensive API documentation for the plan and association management system.
    Includes authentication, user, plan, association, review, admin, file upload, and guest endpoints.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development
  - url: https://api.hackathon.com
    description: Production
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        password:
          type: string
        name:
          type: string
        age:
          type: integer
        gender:
          type: string
          enum: [MALE, FEMALE]
        country:
          type: string
        city:
          type: string
        profilePicture:
          type: string
        role:
          type: string
          enum: [volunteer, associationOwner]
        interests:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Association:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        image_url:
          type: string
        owner_id:
          type: string
        status:
          type: string
          enum: [pending, approved, rejected]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Plan:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        volunteerNumber:
          type: integer
        destinationId:
          type: string
        category_id:
          type: string
        associationId:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Location:
      type: object
      properties:
        id:
          type: string
          format: uuid
        city:
          type: string
        country:
          type: string
        address:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
        rating:
          type: number
          minimum: 1.0
          maximum: 5.0
        comment:
          type: string
        volunteerId:
          type: string
        associationId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Fee:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        fees:
          type: string
        plan_id:
          type: string
    GuestVolunteerForm:
      type: object
      required:
        - name
        - email
        - age
        - gender
        - country
        - city
        - planId
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        age:
          type: integer
        gender:
          type: string
          enum: [MALE, FEMALE]
        country:
          type: string
        city:
          type: string
        planId:
          type: string
        message:
          type: string
    AdminStats:
      type: object
      properties:
        totalUsers:
          type: integer
        userGrowth:
          type: object
          properties:
            thisMonth:
              type: integer
            thisWeek:
              type: integer
        userDistribution:
          type: object
          properties:
            volunteers:
              type: integer
            associationOwners:
              type: integer
        pendingAssociations:
          type: integer
        approvedAssociations:
          type: integer
        associationApprovalRate:
          type: number
        totalPlans:
          type: integer
        activePlans:
          type: integer
        plansByCategory:
          type: array
          items:
            type: object
            properties:
              categoryName:
                type: string
              count:
                type: integer
        topRatedAssociations:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              averageRating:
                type: number
              totalReviews:
                type: integer
        bottomRatedAssociations:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              averageRating:
                type: number
              totalReviews:
                type: integer
        totalReviews:
          type: integer
        averagePlatformRating:
          type: number
    Application:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
        planId:
          type: string
        status:
          type: string
          enum: [pending, accepted, rejected]
        appliedAt:
          type: string
          format: date-time
        user:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            email:
              type: string
            profilePicture:
              type: string
        plan:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            description:
              type: string
    UserPlan:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
        planId:
          type: string
        status:
          type: string
          enum: [pending, accepted, rejected]
        appliedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        message:
          type: string
        error:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
    PendingAssociationUserWithAssociationData:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        name:
          type: string
        age:
          type: integer
        gender:
          type: string
          enum: [MALE, FEMALE]
        country:
          type: string
        role:
          type: string
          enum: [admin, associationOwner, volunteer]
        city:
          type: string
        profilePicture:
          type: string
        associationData:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
      example:
        email: "volunteer1226@oxyjeunes.com"
        password: "password123"
        name: "string"
        age: 18
        gender: "MALE"
        country: "string"
        role: "associationOwner"
        city: "string"
        profilePicture: "string"
        associationData:
          name: "sirtik"
          description: "Irtikaa Association.."
paths:
  /api/auth/login:
    post:
      summary: Login user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                  message:
                    type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/register:
    post:
      summary: Register new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/me:
    get:
      summary: Get current user profile
      tags: [Auth]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/google:
    get:
      summary: Google OAuth login
      tags: [Auth]
      responses:
        '302':
          description: Redirect to Google OAuth
  /api/auth/google/callback:
    get:
      summary: Google OAuth callback
      tags: [Auth]
      responses:
        '200':
          description: Google login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/users:
    post:
      summary: Create user (admin only)
      tags: [Users]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/me:
    get:
      summary: Get current user profile
      tags: [Users]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update current user profile
      tags: [Users]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete current user profile
      tags: [Users]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/plan:
    get:
      summary: Get all plans
      tags:
        - Plan
      responses:
        '200':
          description: All plans retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Plan'
                  message:
                    type: string
                    example: All plans retrieved successfully
  /api/plan/create:
    post:
      summary: Create a new plan
      tags:
        - Plan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Beach Cleanup"
                description:
                  type: string
                  example: "A plan to clean the local beach."
                startDate:
                  type: string
                  format: date-time
                  example: "2024-08-01T09:00:00.000Z"
                endDate:
                  type: string
                  format: date-time
                  example: "2024-08-01T17:00:00.000Z"
                volunteerNumber:
                  type: integer
                  example: 20
                destinationId:
                  type: string
                  example: "destination-uuid"
                category_id:
                  type: string
                  example: "category-uuid"
                fees:
                  type: array
                  items:
                    $ref: '#/components/schemas/Fee'
                totalFees:
                  type: number
                  example: 100
                isPaid:
                  type: boolean
                  example: true
              required:
                - name
                - description
                - startDate
                - endDate
                - volunteerNumber
                - destinationId
                - category_id
                - fees
                - totalFees
                - isPaid
      responses:
        '201':
          description: Plan created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Plan'
                  message:
                    type: string
                    example: "Plan created successfully"
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation failed"
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                        message:
                          type: string
  /api/plan/category/{categoryName}:
    get:
      summary: Get plans by category name
      tags:
        - Plan
      parameters:
        - in: path
          name: categoryName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Plans for category retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Plan'
                  message:
                    type: string
                    example: Plans for category '{categoryName}' retrieved successfully
        '404':
          description: No plans found for category
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: No plans found for category
  /api/plan/filter:
    get:
      summary: Filter plans
      tags: [Plans]
      parameters:
        - in: query
          name: categoryId
          schema:
            type: string
        - in: query
          name: minFees
          schema:
            type: number
        - in: query
          name: isActive
          schema:
            type: boolean
        - in: query
          name: isPaid
          schema:
            type: boolean
        - in: query
          name: country
          schema:
            type: string
        - in: query
          name: city
          schema:
            type: string
      responses:
        '200':
          description: Filtered plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
  /api/plan/popular:
    get:
      summary: Get most popular plans
      tags: [Plans]
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: Maximum number of popular plans to return (default 10)
      responses:
        '200':
          description: Most popular plans retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Plan'
                  message:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/plan/{id}:
    get:
      summary: Get plan by ID
      tags:
        - Plan
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Plan retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Plan'
                  message:
                    type: string
                    example: Plan retrieved successfully
        '404':
          description: Plan not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Plan not found
    put:
      summary: Update plan (Association Owner only)
      tags: [Plans]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                volunteerNumber:
                  type: integer
                isPaid:
                  type: boolean
                totalFees:
                  type: number
                isActive:
                  type: boolean
                image_url:
                  type: string
      responses:
        '200':
          description: Plan updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Plan'
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Only association owner can update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete plan (Association Owner only)
      tags: [Plans]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Optional reason for deletion
      responses:
        '200':
          description: Plan deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Only association owner can delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/plan/applications/pending:
    get:
      summary: Get pending applications for association owner's plans
      tags: [Plans]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Pending applications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Application'
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/plan/applications/{applicationId}/accept:
    put:
      summary: Accept application (Association Owner only)
      tags: [Plans]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: applicationId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Application accepted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Application'
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Only association owner can accept
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/plan/applications/{applicationId}/reject:
    put:
      summary: Reject application (Association Owner only)
      tags: [Plans]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: applicationId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Optional reason for rejection
      responses:
        '200':
          description: Application rejected successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Application'
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Only association owner can reject
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/stats:
    get:
      summary: Get admin statistics
      tags: [Admin]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Admin statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      totalUsers:
                        type: integer
                      userGrowth:
                        type: object
                        properties:
                          thisMonth:
                            type: integer
                          thisWeek:
                            type: integer
                      userDistribution:
                        type: object
                        properties:
                          volunteers:
                            type: integer
                          associationOwners:
                            type: integer
                      pendingAssociations:
                        type: integer
                      approvedAssociations:
                        type: integer
                      associationApprovalRate:
                        type: number
                      totalPlans:
                        type: integer
                      activePlans:
                        type: integer
                      plansByCategory:
                        type: array
                        items:
                          type: object
                          properties:
                            categoryName:
                              type: string
                            count:
                              type: integer
                      topRatedAssociations:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                            averageRating:
                              type: number
                            totalReviews:
                              type: integer
                      bottomRatedAssociations:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                            averageRating:
                              type: number
                            totalReviews:
                              type: integer
                      totalReviews:
                        type: integer
                      averagePlatformRating:
                        type: number
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/stats:
    get:
      summary: Get admin statistics
      tags: [Admin]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Admin statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/AdminStats'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/associations/pending:
    get:
      summary: Get pending associations
      tags: [Admin]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Pending associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PendingAssociationUserWithAssociationData'
  /api/admin/associations/approve/{userId}:
    put:
      summary: Approve association
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Association approved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/associations/reject/{userId}:
    put:
      summary: Reject association
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        '200':
          description: Association rejected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/plans/{id}:
    delete:
      summary: Delete plan
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        '200':
          description: Plan deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/location:
    get:
      summary: Get all locations
      tags: [Locations]
      responses:
        '200':
          description: Locations retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
  /api/location/search:
    get:
      summary: Search locations
      tags: [Locations]
      parameters:
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: sortBy
          schema:
            type: string
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
      responses:
        '200':
          description: Locations search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
  /api/location/{id}:
    get:
      summary: Get location by ID
      tags: [Locations]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Location retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '404':
          description: Location not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/associations/{associationId}/reviews:
    post:
      summary: Create review for association
      tags: [Reviews]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: associationId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  minimum: 1.0
                  maximum: 5.0
                comment:
                  type: string
                  maxLength: 1000
      responses:
        '201':
          description: Review created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get reviews for association
      tags: [Reviews]
      parameters:
        - in: path
          name: associationId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reviews retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
  /api/volunteers/{volunteerId}/reviews:
    get:
      summary: Get reviews by volunteer
      tags: [Reviews]
      parameters:
        - in: path
          name: volunteerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reviews retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
  /api/reviews/{reviewId}:
    put:
      summary: Update review
      tags: [Reviews]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: reviewId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  minimum: 1.0
                  maximum: 5.0
                comment:
                  type: string
                  maxLength: 1000
      responses:
        '200':
          description: Review updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete review
      tags: [Reviews]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: reviewId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Review deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Review not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/upload:
    post:
      summary: Upload file
      tags: [Files]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  filename:
                    type: string
                  url:
                    type: string
  /api/association:
    get:
      summary: Get all associations
      tags: [Associations]
      responses:
        '200':
          description: Associations retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Association'
  /api/association/me:
    get:
      summary: Get my association
      tags: [Associations]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Association retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/association/{id}:
    get:
      summary: Get association by ID
      tags: [Associations]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Association retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
        '404':
          description: Association not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/association/{associationId}/stats:
    get:
      summary: Get association statistics (Association Owner only)
      tags: [Associations]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: associationId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Association statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      totalPlans:
                        type: integer
                      activePlans:
                        type: integer
                      totalApplications:
                        type: integer
                      pendingApplications:
                        type: integer
                      acceptedApplications:
                        type: integer
                      rejectedApplications:
                        type: integer
                      totalReviews:
                        type: integer
                      averageRating:
                        type: number
                      totalVolunteers:
                        type: integer
                      plansThisMonth:
                        type: integer
                      applicationsThisMonth:
                        type: integer
                      topPlans:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                            applications:
                              type: integer
                      recentActivity:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: [plan_created, application_received, review_received]
                            description:
                              type: string
                            date:
                              type: string
                              format: date-time
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Only association owner can view stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Association not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/volunteer:
    post:
      summary: Submit guest volunteer form
      tags: [Guest]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuestVolunteerForm'
      responses:
        '201':
          description: Volunteer form submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/guest/volunteer:
    post:
      summary: Submit guest volunteer form
      tags: [Guest]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuestVolunteerForm'
      responses:
        '200':
          description: Guest volunteer form submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/guest/plans:
    get:
      summary: Get all plans (public)
      tags: [Guest]
      responses:
        '200':
          description: Plans retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
  /api/guest/plans/popular:
    get:
      summary: Get most popular plans (public)
      tags: [Guest]
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: Maximum number of popular plans to return (default 10)
      responses:
        '200':
          description: Most popular plans retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
  /api/guest/plans/{id}:
    get:
      summary: Get plan by ID (public)
      tags: [Guest]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Plan retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '404':
          description: Plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

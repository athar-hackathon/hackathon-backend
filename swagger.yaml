openapi: 3.0.0
info:
  title: Hackathon Backend API
  description: |
    Comprehensive API documentation for the plan and association management system.
    Includes authentication, user, plan, association, review, admin, file upload, and guest endpoints.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development
  - url: https://api.hackathon.com
    description: Production
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        password:
          type: string
        name:
          type: string
        age:
          type: integer
        gender:
          type: string
          enum: [MALE, FEMALE]
        country:
          type: string
        city:
          type: string
        profilePicture:
          type: string
        role:
          type: string
          enum: [volunteer, associationOwner]
        interests:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Association:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        image_url:
          type: string
        owner_id:
          type: string
        status:
          type: string
          enum: [pending, approved, rejected]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Plan:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        volunteerNumber:
          type: integer
        destinationId:
          type: string
        category_id:
          type: string
        associationId:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Location:
      type: object
      properties:
        id:
          type: string
          format: uuid
        city:
          type: string
        country:
          type: string
        address:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
        rating:
          type: number
          minimum: 1.0
          maximum: 5.0
        comment:
          type: string
        volunteerId:
          type: string
        associationId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Fee:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        fees:
          type: string
        plan_id:
          type: string
    GuestVolunteerForm:
      type: object
      required:
        - name
        - email
        - age
        - gender
        - country
        - city
        - planId
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        age:
          type: integer
        gender:
          type: string
          enum: [MALE, FEMALE]
        country:
          type: string
        city:
          type: string
        planId:
          type: string
        message:
          type: string
    Error:
      type: object
      properties:
        message:
          type: string
        error:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
paths:
  /api/auth/login:
    post:
      summary: Login user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                  message:
                    type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/register:
    post:
      summary: Register new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/me:
    get:
      summary: Get current user profile
      tags: [Auth]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/google:
    get:
      summary: Google OAuth login
      tags: [Auth]
      responses:
        '302':
          description: Redirect to Google OAuth
  /api/auth/google/callback:
    get:
      summary: Google OAuth callback
      tags: [Auth]
      responses:
        '200':
          description: Google login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/users:
    post:
      summary: Create user (admin only)
      tags: [Users]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/plan:
    get:
      summary: Get all plans
      tags: [Plans]
      responses:
        '200':
          description: Plans retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
    post:
      summary: Create new plan
      tags: [Plans]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plan'
      responses:
        '201':
          description: Plan created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/plan/category/{categoryName}:
    get:
      summary: Get plans by category name
      tags: [Plans]
      parameters:
        - in: path
          name: categoryName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Plans retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/plan/filter:
    get:
      summary: Filter plans
      tags: [Plans]
      parameters:
        - in: query
          name: categoryId
          schema:
            type: string
        - in: query
          name: minFees
          schema:
            type: number
        - in: query
          name: isActive
          schema:
            type: boolean
        - in: query
          name: isPaid
          schema:
            type: boolean
        - in: query
          name: country
          schema:
            type: string
        - in: query
          name: city
          schema:
            type: string
      responses:
        '200':
          description: Filtered plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
  /api/plan/{id}:
    get:
      summary: Get plan by ID
      tags: [Plans]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Plan retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '404':
          description: Plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/associations/pending:
    get:
      summary: Get pending associations
      tags: [Admin]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Pending associations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Association'
  /api/admin/associations/approve/{userId}:
    put:
      summary: Approve association
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Association approved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/associations/reject/{userId}:
    put:
      summary: Reject association
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        '200':
          description: Association rejected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/plans/{id}:
    delete:
      summary: Delete plan
      tags: [Admin]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        '200':
          description: Plan deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/location:
    get:
      summary: Get all locations
      tags: [Locations]
      responses:
        '200':
          description: Locations retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
  /api/location/search:
    get:
      summary: Search locations
      tags: [Locations]
      parameters:
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: sortBy
          schema:
            type: string
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
      responses:
        '200':
          description: Locations search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
  /api/location/{id}:
    get:
      summary: Get location by ID
      tags: [Locations]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Location retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '404':
          description: Location not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/associations/{associationId}/reviews:
    post:
      summary: Create review for association
      tags: [Reviews]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: associationId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  minimum: 1.0
                  maximum: 5.0
                comment:
                  type: string
                  maxLength: 1000
      responses:
        '201':
          description: Review created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get reviews for association
      tags: [Reviews]
      parameters:
        - in: path
          name: associationId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reviews retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
  /api/volunteers/{volunteerId}/reviews:
    get:
      summary: Get reviews by volunteer
      tags: [Reviews]
      parameters:
        - in: path
          name: volunteerId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reviews retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
  /api/reviews/{reviewId}:
    put:
      summary: Update review
      tags: [Reviews]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: reviewId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  minimum: 1.0
                  maximum: 5.0
                comment:
                  type: string
                  maxLength: 1000
      responses:
        '200':
          description: Review updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete review
      tags: [Reviews]
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: reviewId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Review deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Review not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/upload:
    post:
      summary: Upload file
      tags: [Files]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  filename:
                    type: string
                  url:
                    type: string
  /api/association:
    get:
      summary: Get all associations
      tags: [Associations]
      responses:
        '200':
          description: Associations retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Association'
  /api/association/me:
    get:
      summary: Get my association
      tags: [Associations]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Association retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/association/{id}:
    get:
      summary: Get association by ID
      tags: [Associations]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Association retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
        '404':
          description: Association not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/volunteer:
    post:
      summary: Submit guest volunteer form
      tags: [Guest]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuestVolunteerForm'
      responses:
        '201':
          description: Volunteer form submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
